using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;



class Result
{

    /*
     * Complete the 'meanderingArray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY unsorted as parameter.
     */

    public static List<int> meanderingArray(List<int> unsorted)
    {
            unsorted.Sort();
            int n= unsorted.Count();
            List<int> arr1= new List<int>();
            int ArrIndex=0;
            for(int i=0,j=n-1; i<=n/2 || j>n/2; i++, j--)
            {
                if(ArrIndex<n)
                {
                    int vol= unsorted[j];
                    arr1.Add(vol);
                    
                }
                ArrIndex++;
                
                 if(ArrIndex<n)
                {
                    int vol= unsorted[i];
                    arr1.Add(vol);
                    ArrIndex++;
                    
                }
                
                
            }
            
            return arr1;
            
    }
    

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int unsortedCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> unsorted = new List<int>();

        for (int i = 0; i < unsortedCount; i++)
        {
            int unsortedItem = Convert.ToInt32(Console.ReadLine().Trim());
            unsorted.Add(unsortedItem);
        }

        List<int> result = Result.meanderingArray(unsorted);

        textWriter.WriteLine(String.Join("\n", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
