using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;



class Result
{

    /*
     * Complete the 'groupDivision' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY levels
     *  2. INTEGER maxSpread
     */

    public static int groupDivision(List<int> levels, int maxSpread)
    {
            levels.Sort();
            int result=1;
            int previousOne= levels[0];
            for(int i=1; i<levels.Count; i++)
            {
                if(previousOne+maxSpread <levels[i])
                {
                    previousOne=levels[i];
                    result++;
                }
            }
            return result;
    }
    

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int levelsCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> levels = new List<int>();

        for (int i = 0; i < levelsCount; i++)
        {
            int levelsItem = Convert.ToInt32(Console.ReadLine().Trim());
            levels.Add(levelsItem);
        }

        int maxSpread = Convert.ToInt32(Console.ReadLine().Trim());

        int result = Result.groupDivision(levels, maxSpread);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
