import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'finalInstances' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER instances
     *  2. INTEGER_ARRAY averageUtil
     */

    public static int finalInstances(int instances, List<Integer> averageUtil) {
    // Write your code here
    
    for(int i=0; i<averageUtil.size();i++)
    {
        
        if(averageUtil.get(i)<25)
        {
            if(instances!=1 && (instances & 1)==0)
            {
                instances= instances/2;
                i=i+10;
                
            } else if(instances!=1 && (instances & 1)==1)
            {
               instances= (instances/2)+1;
                i=i+10; 
            }
        } else if(averageUtil.get(i)>60)
        {
            if(instances<=100000000)
            {
                instances= 2*instances;
                i=i+10;
            }
        }
    }
    
    return instances;

    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int instances = Integer.parseInt(bufferedReader.readLine().trim());

        int averageUtilCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> averageUtil = IntStream.range(0, averageUtilCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.finalInstances(instances, averageUtil);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
